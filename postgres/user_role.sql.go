// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user_role.sql

package db

import (
	"context"
)

const deleteUserRoleByUserID = `-- name: DeleteUserRoleByUserID :exec
DELETE FROM user_role WHERE user_id = $1 RETURNING role_id, user_id, created_at, updated_at
`

func (q *Queries) DeleteUserRoleByUserID(ctx context.Context, userID int64) error {
	_, err := q.db.Exec(ctx, deleteUserRoleByUserID, userID)
	return err
}

const deleteUserRoleByUserIDAndRoleID = `-- name: DeleteUserRoleByUserIDAndRoleID :exec
DELETE FROM user_role WHERE user_id = $1 AND role_id = $2 RETURNING role_id, user_id, created_at, updated_at
`

type DeleteUserRoleByUserIDAndRoleIDParams struct {
	UserID int64
	RoleID int32
}

func (q *Queries) DeleteUserRoleByUserIDAndRoleID(ctx context.Context, arg DeleteUserRoleByUserIDAndRoleIDParams) error {
	_, err := q.db.Exec(ctx, deleteUserRoleByUserIDAndRoleID, arg.UserID, arg.RoleID)
	return err
}

const getUserRoleByRoleID = `-- name: GetUserRoleByRoleID :many
SELECT role_id, user_id, created_at, updated_at FROM user_role WHERE role_id = $1
`

func (q *Queries) GetUserRoleByRoleID(ctx context.Context, roleID int32) ([]UserRole, error) {
	rows, err := q.db.Query(ctx, getUserRoleByRoleID, roleID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserRole
	for rows.Next() {
		var i UserRole
		if err := rows.Scan(
			&i.RoleID,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserRoleByUserID = `-- name: GetUserRoleByUserID :many
SELECT role_id, user_id, created_at, updated_at FROM user_role WHERE user_id = $1
`

func (q *Queries) GetUserRoleByUserID(ctx context.Context, userID int64) ([]UserRole, error) {
	rows, err := q.db.Query(ctx, getUserRoleByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserRole
	for rows.Next() {
		var i UserRole
		if err := rows.Scan(
			&i.RoleID,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertUserRole = `-- name: InsertUserRole :one
INSERT INTO user_role (user_id, role_id)
VALUES ($1, $2) RETURNING role_id, user_id, created_at, updated_at
`

type InsertUserRoleParams struct {
	UserID int64
	RoleID int32
}

func (q *Queries) InsertUserRole(ctx context.Context, arg InsertUserRoleParams) (UserRole, error) {
	row := q.db.QueryRow(ctx, insertUserRole, arg.UserID, arg.RoleID)
	var i UserRole
	err := row.Scan(
		&i.RoleID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listUserRoles = `-- name: ListUserRoles :many
SELECT role_id, user_id, created_at, updated_at FROM user_role
`

func (q *Queries) ListUserRoles(ctx context.Context) ([]UserRole, error) {
	rows, err := q.db.Query(ctx, listUserRoles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserRole
	for rows.Next() {
		var i UserRole
		if err := rows.Scan(
			&i.RoleID,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
